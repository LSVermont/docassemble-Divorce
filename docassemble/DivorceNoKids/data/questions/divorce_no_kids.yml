---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALAnyState:any_state.yml
  - docassemble.ALToolbox:phone-number-validation.yml
---
metadata:
  title: >-
    Divorce (no kids)
  short title: >-
    Divorce (no kids)
  description: |-
    This interview helps someone in Vermont ask the court for a Divorce (no kids).
  tags:
    - "FA-00-00-00-00"
  authors:
    - Mia Bonardi
  original_form:
    - https://www.vermontjudiciary.org/sites/default/files/documents/400-00836NoKids_1.pdf
  allowed_courts: []
  typical_role: "plaintiff"
  al_weaver_version: "1.10.1"
  generated_on: "2023-07-25"
---
features:
  css: style.css
---
objects:
  - al_logo: DAStaticFile.using(filename="LSV_bug.png")
---
images:
  big_logo: LSV_logo.png 
---
reconsider: True
code: |
  al_menu_items_tmp = [
    {"url": url_ask(['al_start_over_confirmation','al_start_over']),
    "label": "Start over"
    },
    {
      "url": url_ask(['al_exit_logout_confirmation', 'al_exit_logout']),
      "label": "Exit and delete my answers"
    },
  ]
  if al_enable_incomplete_downloads:
    al_menu_items_tmp.append({
        "url": url_action('al_error_action_download_screen'), 
        "label": "Download current progress"
    })
  
  # Answer set feature is behind a server-wide configuration option
  if get_config('assembly line',{}).get('enable answer sets'):
    al_menu_items_tmp.extend([
    {"url": url_ask(["al_sessions_snapshot_label", {"recompute": ["al_sessions_save_session_snapshot"]}, "al_sessions_save_status"]),
    "label": "Save answer set"
    },
    action_menu_item("Load answer set", "al_load_saved_session"),
  ]
  )
  
  if get_config('assembly line',{}).get('enable answer set imports'):
    al_menu_items_tmp.append(
      {"url": url_ask(["al_sessions_json_file", {"recompute": ["al_sessions_import_json"]}, "al_sessions_load_status"]),
      "label": "Import answer set"
      }
    )
  al_menu_items_tmp.append(
    {
      "url": url_action('edit_answers_screen'),
      "label": "Edit your answers"
      
    }
  )
    
  al_menu_items = al_menu_items_tmp
  del al_menu_items_tmp
---
id: choose a court
question: |
  Choose a Family Court
fields:
  - note: |
      Choose the county where you will file your forms. 
      
      Not sure what county? [Check this list of cities and towns to find the county.](https://en.m.wikipedia.org/wiki/List_of_municipalities_in_Vermont#Cities)
  - County: trial_court_name
    choices:
      - Addison
      - Bennington
      - Caledonia
      - Chittenden
      - Essex
      - Franklin
      - Grand Isle
      - Lamoille
      - Orange
      - Orleans
      - Rutland
      - Washington
      - Windham
      - Windsor
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "VT"
---
code: |
  github_repo_name =  'docassemble-DivorceNoKids'
---
code: |
  interview_short_title = "Ask the court for a Divorce (no kids)"
---
code: |
  al_form_type = "starts_case" 
---
objects:
  - users: ALPeopleList.using(ask_number=True,target_number=1)
  - other_parties: ALPeopleList.using(ask_number=True,target_number=1)
  - earlier_actions: DAList.using(object_type=Thing, ask_number=True, complete_attribute='complete')
  - earlier_RFA: DAList.using(object_type=Thing, ask_number=True, complete_attribute='complete1')
---
sections:
  - review_divorce_no_kids: Review your answers
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_divorce_no_kids
code: |
  # Set the allowed courts for this interview
  allowed_courts = []
  nav.set_section("review_divorce_no_kids")
  user_role = "plaintiff"
  user_ask_role = "plaintiff"
  
  if (not plaintiff_VT and not defendant_VT) or (not defendant_VT and not plaintiff_VT):
  
    if not marriage_or_civil_union_VT and not both_cant_divorce_current_state and have_school_age_children and not have_property_agreement:

      jurisdiction_kickout

  users.gather()
  set_parts(subtitle=str(users))
  users[0].birthdate
  users[0].address.address
  users[0].email
  user_has_attorney
  
  set_progress(16)
  
  other_parties.gather()
  other_parties[0].birthdate
  other_parties[0].address.address
  other_parties[0].email
  other_parties_has_attorney
  
  set_progress(32)
  
  license_type
  
  grant_for
  
  set_progress(48)
  
  filing_financial_form
  
  if earlier_actions_yes: 
    earlier_actions.gather()
  else: 
    earlier_actions.target_number = 0
    
  if earlier_RFA_yes:
    earlier_RFA.gather()
  else: 
    earlier_RFA.target_number = 0
    
  set_progress(64)
  
  plaintiff_des_assistance
  plaintiff_military_service
  
  docket_number
  
  trial_court_name
  
  interview_order_divorce_no_kids = True
---
sets:
  - other_parties[i].name.first
  - other_parties[i].name.last
  - other_parties[i].name.middle
  - other_parties[i].name.suffix
id: names of opposing parties
question: |
  Name of the **defendant** in this matter
fields:
  - code: |
      other_parties[i].name_fields(person_or_business='person')
---
id: jurisdiction kickout
question: |
  Stop
subquestion: |
  <i class="fas fa-hand-paper fa-3x" aria-hidden="true"></i>  **Stop.** In this situation, these are **not** the right forms to fill out. **Do not use this interview.** 
continue button field: jurisdiction_kickout
buttons:
  - Exit: exit
    url: https://vtlawhelp.org
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  interview_order_divorce_no_kids
  signature_date
  # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
      },
  )
  divorce_no_kids_preview_question
  basic_questions_signature_flow    
  
  divorce_no_kids_download
---
id: basic questions intro screen
decoration: form-lineal
question: |
  **${interview_short_title} in Vermont**
subquestion: |  
  <div class="border-around-text">
  <p>Welcome to ${ AL_ORGANIZATION_TITLE}.</p>
  
  <p>${ AL_ORGANIZATION_TITLE } can help you complete and download forms in 3 steps:</p>
  <ul><li><b>Step 1:</b> Answer questions that will fill in court forms for you.</li>
  <li><b>Step 2:</b> Preview the completed forms.</li>
  <li><b>Step 3:</b> Download, save or print the final forms. You will need to mail, email, efile or deliver them to the court on your own.</li></ul>
  </div>  

  VTCourtForms interviews were created by Legal Services Vermont with support from the Legal Services Corporation. It is free to use this program. This site is not a lawyer. Visit our [VTLawHelp.org website](https://vtlawhelp.org/roadmap/relief-from-abuse/step-1) for more information about Relief from Abuse orders.
  
  [FILE big_logo, 30%, Legal Services Vermont logo]

fields:
  - To continue, please accept our [terms of use](https://vtlawhelp.org/vlh-privacy).: acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.        
continue button field: al_intro_screen
---
code: |
  earlier_actions[i].action_type
  earlier_actions[i].complete = True
---
code: |
  earlier_RFA[i].action_type
  earlier_RFA[i].complete1 = True
---
id: marriage or civil union
question: |
  Do you and ${ other_parties } have a marriage or civil union?
fields:
  - no label: license_type
    datatype: checkboxes
    choices: 
      - Marriage: marriage
      - Civil Union: civil_union
    none of the above: False
  - Marriage City: marriage_city
    show if: license_type['marriage']
  - Marriage State: marriage_state
    code: |
      states_list()
    default: VT
    show if: license_type['marriage']
  - Marriage Date: marriage_date
    datatype: date
    show if: license_type['marriage']
  - Civil Union City: civil_union_city
    show if: license_type['civil_union']
  - Civil Union State: civil_union_state
    code: |
      states_list()
    default: VT
    show if: license_type['civil_union']
  - Civil Union Date: civil_union_date
    datatype: date
    show if: license_type['civil_union']
---
id: plaintiff VT 6 months
question: |
  Have you lived in Vermont since ${ today().minus(months=6) }?
fields:
  - no label: plaintiff_VT
    datatype: yesnoradio
  - Date you moved to VT: date_plaintiff_moved_to_VT
    datatype: date
    show if: plaintiff_VT
---
id: defendant VT 6 months
question: |
  Has the defendant lived in Vermont since ${ today().minus(months=6) }?
fields:
  - no label: defendant_VT
    datatype: yesnoradio
  - Date the defendant moved to VT: date_defendant_moved_to_VT
    datatype: date  
    show if: defendant_VT
---
id: marriage_or_civil_union_VT
question: |
  Did you and your spouse get a marriage or civil union in VT?
fields:
  - no label: marriage_or_civil_union_VT
    datatype: yesnoradio
---
id: both_cant_divorce_current_state
question: |
  Do you and your spouse currently live in states where you can't get a divorce or dissolve your civil union?
fields:
  - no label: both_cant_divorce_current_state
    datatype: yesnoradio
---
id: have school age children
question: |
  Do you and your spouse have school age children?
fields:
  - no label: have_school_age_children
    datatype: yesnoradio
---
id: property agreement
question: |
  Do you and your spouse already have an agreement about how to deal with your property and debts?
fields:
  - no label: have_property_agreement
    datatype: yesnoradio
--- 
id: earlier actions
question: |
  Have you or the defendant filed for divorce, legal separation, dissolution or annulment before filing of this petition? 
fields:
  - no label: earlier_actions_yes
    datatype: yesnoradio
  - How many?: earlier_actions.target_number
    datatype: integer
    show if: earlier_actions_yes
---
id: earlier actions
question: |
  Have you or the defendant filed for divorce, legal separation, dissolution or annulment before filing of this petition? 
fields:
  - no label: earlier_RFA_yes
    datatype: yesnoradio
  - How many?: earlier_RFA.target_number
    datatype: integer
    show if: earlier_RFA_yes
---
id: collect actions
generic object: DAList
question: |
  Tell us about the ${ ordinal(i) } action.
subquestion: |
  Attach a copy of any Court Order issued.
fields:
  - Type of action: x[i].action_type
  - Who filed: x[i].who_filed
  - Where filed: x[i].where_filed
  - Year filed: x[i].year_filed
---
generic object: DAList
question: |
  Is there another action?
yesno: x[i].there_is_another
---
id: Gather users street or mailing address
sets:
  - users[0].address.address
  - users[0].address.city
question: |
  What is your address?
fields:
  - Address: users[0].address.address
    address autocomplete: True
  - Unit: users[0].address.unit
    required: False
  - City: users[0].address.city
  - State: users[0].address.state
    code: |
      states_list()
    default: VT
  - Zip or postal code: users[0].address.zip
    required: False
  - County: users[0].address.county
  - Do you have a mailing address that is different from your street address?: users_mailing_address_different
    datatype: yesnoradio
  - Mailing address: users[0].mailing_address.address
    address autocomplete: True
    show if: users_mailing_address_different
  - Unit: users[0].mailing_address.unit
    required: False
    show if: users_mailing_address_different
  - City: users[0].mailing_address.city
    show if: users_mailing_address_different
  - State: users[0].mailing_address.state
    code: |
      states_list()
    default: VT
    show if: users_mailing_address_different
  - Zip or postal code: users[0].mailing_address.zip
    required: False
    show if: users_mailing_address_different
---
id: Gather users contact information
question: |
  What is your contact information?
subquestion: |
  Include at least **one way** to reach you. 
fields:  
  - Daytime phone number: users[0].daytime_phone_number
    datatype: al_international_phone
    required: False
  - Evening phone number: users[0].evening_phone_number
    datatype: al_international_phone
    required: False
  - Email: users[0].email    
    datatype: email
    required: False      
validation code: |
  if (not showifdef('users[0].daytime_phone_number') and \
      (not showifdef('users[0].email')) and \
      (not showifdef('users[0].evening_phone_number'))):
    validation_error(word("You need to provide at least one contact method."))
---
id: Users attorney info
question: |
  Do you have an attorney?
fields:
  - no label: user_has_attorney
    datatype: yesnoradio
  - Attorney name: users1_attorneys_name
    show if: user_has_attorney
  - Attorney phone number: users1_attorneys_phone_numer
    datatype: al_international_phone
    show if: user_has_attorney
---
id: Users resided in VT length
question: |
  Have you resided in Vermont for 6 full months?
fields:
  - no label: user_resided_VT_6_months
    datatype: yesnoradio
---
id: des assistance
question: |
   Do you or ${ other_parties } receive assistance from the Division of Economic Services (DES) 
subquestion: |
  Examples include: Food Stamps and Reach Up.
fields: 
  - I recieves DES assisance: plaintiff_des_assistance
    datatype: yesno
  - ${ other_parties } recieves DES assisance: defendant_des_assistance
    datatype: yesno
---
id: military service
question: |
   Have you or ${ other_parties } served in the military?
fields: 
  - I served in the military: plaintiff_military_service
    datatype: yesno
  - ${ other_parties } served in the military: defendant_military_service
    datatype: yesno
---
id: other parties attorney info
question: |
  Does ${ other_parties[0] } have an attorney?
fields:
  - no label: other_parties_has_attorney
    datatype: yesnoradio
  - Attorney name: other_parties1_attorneys_name
    show if: other_parties_has_attorney
  - Attorney phone number: other_parties1_attorneys_phone_number
    datatype: al_international_phone
    show if: other_parties_has_attorney
---
id: Gather other parties contact information
question: |
  What is ${ other_parties[0] }'s contact information?
subquestion: |
  Include at least **one way** to reach you. 
fields:  
  - Daytime phone number: other_parties[0].daytime_phone_number
    datatype: al_international_phone
    required: False
  - Evening phone number: other_parties[0].evening_phone_number
    datatype: al_international_phone
    required: False
  - Email: other_parties[0].email    
    datatype: email
    required: False      
validation code: |
  if (not showifdef('other_parties[0].daytime_phone_number') and \
      (not showifdef('other_parties[0].email')) and \
      (not showifdef('other_parties[0].evening_phone_number'))):
    validation_error(word("You need to provide at least one contact method."))
---
id: Gather other parties street or mailing address
sets:
  - other_parties[0].address.address
  - other_parties[0].address.city
question: |
  What is ${ other_parties[0] }'s address?
fields:
  - Address: other_parties[0].address.address
    address autocomplete: True
  - Unit: other_parties[0].address.unit
    required: False
  - City: other_parties[0].address.city
  - State: other_parties[0].address.state
    code: |
      states_list()
    default: VT
  - Zip or postal code: other_parties[0].address.zip
    required: False
  - County: other_parties[0].address.county
  - Does ${ other_parties } have a mailing address that is different from their street address?: other_parties_mailing_address_different
    datatype: yesnoradio
  - Mailing address: other_parties[0].mailing_address.address
    address autocomplete: True
    show if: other_parties_mailing_address_different
  - Unit: other_parties[0].mailing_address.unit
    required: False
    show if: other_parties_mailing_address_different
  - City: other_parties[0].mailing_address.city
    show if: other_parties_mailing_address_different
  - State: other_parties[0].mailing_address.state
    code: |
      states_list()
    default: VT
    show if: other_parties_mailing_address_different
  - Zip or postal code: other_parties[0].mailing_address.zip
    required: False
    show if: other_parties_mailing_address_different
---
id: Why are you seeking x from the court
question: |
  What are your grounds for divorce?
fields:
  - "Six month separation": six_month_separation
    datatype: yesno
  - "Date of separation": separation_date
    datatype: date
  - "Other ground divorce": other_ground_divorce
    datatype: yesno
  - "Other ground divorce explanation": other_ground_divorce_explanation
    maxlength: 55
---
id: filing_financial_form
question: |
  Are you also filing a completed Financial form 400-00813B?
subquestion: |
  This would need to bbe filed with your complaint and list all of the property, assets and debts that you and ${ other_parties[0] } own together or separately that are known to you.
fields:
  - "Filing financial form": filing_financial_form
    datatype: yesnoradio
---
id: asking the court for 
question: |
  What are you asking the court for?
fields:
  - Asking for: grant_for
    datatype: checkboxes
    choices: 
      - Divorce: divorce
      - Legal Separation: legal_separation
      - Dissolution: dissolution
    none of the above: False
  - On what grounds?: grounds
    datatype: checkboxes
    choices: 
      - Six month separation: six_month_separation
      - Other ground divorce: other_ground
    none of the above: False
  - Date of separation: separation_date
    datatype: date
    show if: grounds["six_month_separation"]
  - Other ground divorce explanation: other_ground_explanation
    show if: grounds["other_ground"]
  - note: Other things you are asking the court for
  - Property maintenance: property_maintenance
    datatype: yesno
  - Spousal maintenancee: spousal_maintenancee
    datatype: yesno
  - Court costs: court_costs
    datatype: yesno
  - Attorney fees: attorney_fees
    datatype: yesno
  - Name change: name_change
    datatype: yesno
  - Plaintiff former name: plaintiff_former_name
    show if: name_change
  - Issue an order with a written agreement between you and ${ other_parties }: written_agreement_attached
    datatype: yesno
  - note: You must attach the written agreement. To qualify for the reduced filing fee, the attached agreement must cover all the issues that you seek to have the Court resolve.
    show if: written_agreement_attached
---
id: preview divorce_no_kids
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   
  
  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_divorce_no_kids'), label='Edit answers', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: divorce_no_kids_preview_question    
---
code: |
  signature_fields = ['users[0].signature']
---
code: |
  # This is a placeholder for the addresses that will be searched
  # for matching address to court. Edit if court venue is based on 
  # a different address than the user's
  [user.address.address for user in users.complete_elements()]
  addresses_to_search = [user.address for user in users.complete_elements()]
---
id: divorce no kids review screen
event: review_divorce_no_kids
question: |
  Review your answers
review:
  - Edit: docket_number
    button: |
      **Docket number**:
      ${ docket_number }
  - Edit: trial_court
    button: |
      **Trial court**
  
      % if defined("trial_court"):
      * address: ${ trial_court }
      % endif
  - Edit: users.revisit
    button: |
      **Users**

      % for item in users:
        * ${ item }
      % endfor
  - Edit: other_parties.revisit
    button: |
      **Other parties**

      % for item in other_parties:
        * ${ item }
      % endfor
  - Edit: earlier_actions.revisit
    button: |
      **Earlier Actions**

      % for item in earlier_actions:
        * ${ item }
      % endfor
  - Edit: earlier_RFA.revisit
    button: |
      **Earlier RFAs**

      % for item in earlier_RFA:
        * ${ item }
      % endfor
  - Edit: divorce
    button: |
      **Divorce**:
      ${ word(yesno(divorce)) }
  - Edit: civil_union_dissolution
    button: |
      **Civil union dissolution**:
      ${ word(yesno(civil_union_dissolution)) }
  - Edit: legal_separation
    button: |
      **Legal separation**:
      ${ word(yesno(legal_separation)) }
  - Edit: plaintiff_VT
    button: |
      **Plaintiff vt**:
      ${ word(yesno(plaintiff_VT)) }
  - Edit: date_plaintiff_moved_to_VT
    button: |
      **Date plaintiff moved to vt**:
      ${ date_plaintiff_moved_to_VT }
  - Edit: defendant_VT
    button: |
      **Defendant vt**:
      ${ word(yesno(defendant_VT)) }
  - Edit: date_defendant_moved_to_VT
    button: |
      **Date defendant moved to vt**:
      ${ date_defendant_moved_to_VT }
  - Edit: marriage
    button: |
      **Marriage**:
      ${ word(yesno(marriage)) }
  - Edit: marriage_state
    button: |
      **Marriage state**:
      ${ marriage_state }
  - Edit: marriage_city
    button: |
      **Marriage city**:
      ${ marriage_city }
  - Edit: marriage_date
    button: |
      **Date of marriage**:
      ${ marriage_date }
  - Edit: civil_union
    button: |
      **Civil union**:
      ${ word(yesno(civil_union)) }
  - Edit: civil_union_city
    button: |
      **Civil union city**:
      ${ civil_union_city }
  - Edit: civil_union_state
    button: |
      **Civil union state**:
      ${ civil_union_state }
  - Edit: civil_union_date
    button: |
      **Date of civil union**:
      ${ civil_union_date }
  - Edit: six_month_separation
    button: |
      **Six month separation**:
      ${ word(yesno(six_month_separation)) }
  - Edit: separation_date
    button: |
      **Date of separation**:
      ${ separation_date }
  - Edit: filing_financial_form
    button: |
      **Filing financial form**:
      ${ word(yesno(filing_financial_form)) }
  - Edit: plaintiff_des_assistance
    button: |
      **Plaintiff des assistance**:
      ${ word(yesno(plaintiff_des_assistance)) }
  - Edit: defendant_des_assistance
    button: |
      **Defendant des assistance**:
      ${ word(yesno(defendant_des_assistance)) }
  - Edit: defendant_military_service
    button: |
      **Defendant military service**:
      ${ word(yesno(defendant_military_service)) }
  - Edit: plaintiff_military_service
    button: |
      **Plaintiff military service**:
      ${ word(yesno(plaintiff_military_service)) }
  - Edit: divorce_decree
    button: |
      **Divorce decree**:
      ${ word(yesno(divorce_decree)) }
  - Edit: legal_separation_decree
    button: |
      **Legal separation decree**:
      ${ word(yesno(legal_separation_decree)) }
  - Edit: dissolution_decree
    button: |
      **Dissolution decree**:
      ${ word(yesno(dissolution_decree)) }
  - Edit: property_maintenance
    button: |
      **Property maintenance**:
      ${ word(yesno(property_maintenance)) }
  - Edit: spousal_maintenancee
    button: |
      **Spousal maintenancee**:
      ${ word(yesno(spousal_maintenancee)) }
  - Edit: court_costs
    button: |
      **Court costs**:
      ${ word(yesno(court_costs)) }
  - Edit: attorney_fees
    button: |
      **Attorney fees**:
      ${ word(yesno(attorney_fees)) }
  - Edit: name_change
    button: |
      **Name change**:
      ${ word(yesno(name_change)) }
  - Edit: plaintiff_former_name
    button: |
      **Plaintiff former name**:
      ${ plaintiff_former_name }
  - Edit: written_agreement_attached
    button: |
      **Written agreement attached**:
      ${ word(yesno(written_agreement_attached)) }
---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Birthdate: |
      row_item.birthdate if defined("row_item.birthdate") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.state") else ""
  - Email: |
      row_item.email if defined("row_item.email") else ""
edit:
  - name.first
  - birthdate
  - address.state
  - email
confirm: True
---
continue button field: other_parties.revisit
question: |
  Edit other_parties
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Birthdate: |
      row_item.birthdate if defined("row_item.birthdate") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.state") else ""
  - Email: |
      row_item.email if defined("row_item.email") else ""
edit:
  - name.first
  - birthdate
  - address.state
  - email
confirm: True
---
continue button field: earlier_actions.revisit
question: |
  Edit earlier actions
subquestion: |
  ${ earlier_actions.table }

  ${ earlier_actions.add_action() }
---
table: earlier_actions.table
rows: earlier_actions
columns:
  - Where filed: |
      row_item.where_filed if defined("row_item.where_filed") else ""
  - Who filed: |
      row_item.who_filed if defined("row_item.who_filed") else ""
  - Action type: |
      row_item.action_type if defined("row_item.action_type") else ""
  - Year filed: |
      row_item.year_filed if defined("row_item.year_filed") else ""
edit:
  - where_filed
  - who_filed
  - action_type
  - year_filed
confirm: True
---
continue button field: earlier_RFA.revisit
question: |
  Edit earlier RFA
subquestion: |
  ${ earlier_RFA.table }

  ${ earlier_RFA.add_action() }
---
table: earlier_RFA.table
rows: earlier_RFA
columns:
  - Where filed: |
      row_item.where_filed if defined("row_item.where_filed") else ""
  - Who filed: |
      row_item.who_filed if defined("row_item.who_filed") else ""
  - Action type: |
      row_item.action_type if defined("row_item.action_type") else ""
  - Year filed: |
      row_item.year_filed if defined("row_item.year_filed") else ""
edit:
  - where_filed
  - who_filed
  - action_type
  - year_filed
confirm: True
---
id: download divorce_no_kids
event: divorce_no_kids_download
question: |
  All done
subquestion: |
  Thank you ${users}. Your form is ready to download and deliver.
  
  View, download and send your form below. Click the "Edit answers" button to fix any mistakes.

  ${ action_button_html(url_action('review_divorce_no_kids'), label='Edit answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

progress: 100
---
# ALDocument objects specify the metadata for each template
objects:
  - divorce_no_kids_Post_interview_instructions: ALDocument.using(title="Instructions", filename="divorce_no_kids_next_steps.docx", enabled=True, has_addendum=False)
  - divorce_no_kids_attachment: ALDocument.using(title="Divorce (no kids)", filename="divorce_no_kids", enabled=True, has_addendum=True, )
---
attachment:
  variable name: divorce_no_kids_attachment.addendum
  docx template file: divorce_no_kids_addendum.docx
---
code: |
  divorce_no_kids_attachment.overflow_fields['earlier_actions'].overflow_trigger = 3
  divorce_no_kids_attachment.overflow_fields['earlier_actions'].label = "Other earlier actions"
  divorce_no_kids_attachment.overflow_fields['earlier_RFA'].overflow_trigger = 3
  divorce_no_kids_attachment.overflow_fields['earlier_RFA'].label = "Other RFA actions"
  divorce_no_kids_attachment.overflow_fields.gathered = True 
---
# Bundles group the ALDocuments into separate downloads, such as for court and for the user
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[divorce_no_kids_Post_interview_instructions, divorce_no_kids_attachment], filename="divorce_no_kids", title="All forms to download for your records", enabled=True)
  - al_court_bundle: ALDocumentBundle.using(elements=[divorce_no_kids_attachment],  filename="divorce_no_kids", title="All forms to deliver to court", enabled=True)
---
# Each attachment defines a key in an ALDocument. We use `i` as the placeholder here so the same template is 
# used for "preview" and "final" keys, and logic in the template checks the value of 
# `i` to show or hide the user's signature
attachment:
  name: Post-interview-Instructions
  filename: divorce_no_kids_next_steps
  docx template file: divorce_no_kids_next_steps.docx
  variable name: divorce_no_kids_Post_interview_instructions[i]
  skip undefined: True
  tagged pdf: True
---
attachment:
  name: divorce no kids
  filename: divorce_no_kids
  variable name: divorce_no_kids_attachment[i]
  skip undefined: True
  pdf template file: divorce_no_kids.pdf
  fields:
      - "docket_number": ${ docket_number }
      - "trial_court_county": ${ trial_court_name }
      - "users1_name": ${ users[0].name }
      - "other_parties1_name": ${ other_parties[0] }
      - "users1_name1": ${ users[0].name }
      - "users1_birthdate": ${ users[0].birthdate.format() }
      - "users1_address_line_one": ${ users[0].address.line_one() }
      - "users1_address_line_two": ${ users[0].address.line_two() }
      - "users1_address_mailing_line_one": ${ users[0].mailing_address.line_one() }
      - "users1_address_mailing_line_two": ${ users[0].mailing_address.line_two() }
      - "users1_email": ${ users[0].email }
      - "users1_evening_phone_number": ${ users[0].evening_phone_number }
      - "users1_daytime_phone_number": ${ users[0].daytime_phone_number }
      - "users1_attorneys_name": ${ users1_attorneys_name }
      - "users1_attorneys_phone_numer": ${ users1_attorneys_phone_numer }
      - "other_parties1_name1": ${ other_parties[0].name }
      - "other_parties1_birthdate": ${ other_parties[0].birthdate.format() }
      - "other_parties1_address_line_one": ${ other_parties[0].address.line_one() }
      - "other_parties1_address_line_two": ${ other_parties[0].address.line_two() }
      - "other_parties1__mailing_address_line_one": ${ other_parties[0].mailing_address.line_one() }
      - "other_parties1__mailing_address_line_two": ${ other_parties[0].mailing_address.line_two() }
      - "other_parties1_email": ${ other_parties[0].email }
      - "other_parties1_evening_phone_number": ${ other_parties[0].evening_phone_number }
      - "other_parties1_daytime_phone_number": ${ other_parties[0].daytime_phone_number }
      - "other_parties1_attorneys_name": ${ other_parties1_attorneys_name }
      - "other_parties1_attorneys_phone_number": ${ other_parties1_attorneys_phone_number }
      - "other_parties1_name2": ${ other_parties[0].name }
      - "users1_name2": ${ users[0].name }
      - "users1_name3": ${ users[0].name }
      - "divorce": ${ grant_for["divorce"] }
      - "civil_union_dissolution": ${ grant_for["dissolution"] }
      - "legal_separation": ${ grant_for["legal_separation"] }
      - "trial_court_county1": ${ trial_court_name }
      - "signature_date": ${ signature_date }
      - "users1_signature": ${ users[0].signature_if_final(i) }
      - "users1_address_county": ${ users[0].address.county }
      - "users1_address_state": ${ users[0].address.state }
      - "plaintiff_VT": ${ plaintiff_VT }
      - "date_plaintiff_moved_to_VT": ${ date_plaintiff_moved_to_VT }
      - "other_parties1_address_county": ${ other_parties[0].address.county }
      - "other_parties1_address_state": ${ other_parties[0].address.state }
      - "defendant_VT": ${ defendant_VT }
      - "date_defendant_moved_to_VT": ${ date_defendant_moved_to_VT }
      - "marriage": ${ license_type["marriage"] }
      - "marriage_state": ${ marriage_state }
      - "marriage_city": ${ marriage_city }
      - "marriage_date": ${ marriage_date.format() }
      - "civil_union": ${ license_type["civil_union"] }
      - "civil_union_city": ${ civil_union_city }
      - "civil_union_state": ${ civil_union_state }
      - "civil_union_date": ${ civil_union_date.format() }
      - "grant_for": True 
      - "divorce1": ${ grant_for["divorce"] }
      - "legal_seeparation1": ${ grant_for["legal_separation"] }
      - "civil_union_dissolution1": ${ grant_for["dissolution"] }
      - "six_month_separation": ${ grounds["six_month_separation"] }
      - "separation_date": ${ separation_date.format() }
      - "other_ground": ${ grounds["other_ground"] }
      - "other_ground_explanation": ${ other_ground_explanation }
      - "filing_financial_form": ${ filing_financial_form }
      - "not_filing_financial_form": ${ not filing_financial_form }
      - "plaintiff_des_assistance": ${ plaintiff_des_assistance }
      - "defendant_des_assistance": ${ defendant_des_assistance }
      - "earlier_actions_no": ${ not earlier_actions_yes }
      - "earlier_actions_yes": ${ earlier_actions_yes }
      - "earlier_actions_where_filed1": ${ earlier_actions[0].where_filed }
      - "earlier_actions_filer1": ${ earlier_actions[0].who_filed }
      - "earlier_actions_type1": ${ earlier_actions[0].action_type }
      - "earlier_actions_year_filed1": ${ earlier_actions[0].year_filed }
      - "earlier_actions_where_filed2": ${ earlier_actions[1].where_filed }
      - "earlier_actions_filer2": ${ earlier_actions[1].who_filed }
      - "earlier_actions_type2": ${ earlier_actions[1].action_type }
      - "earlier_actions_year_filed2": ${ earlier_actions[1].year_filed }
      - "earlier_actions_where_filed3": ${ earlier_actions[2].where_filed }
      - "earlier_actions_filer3": ${ earlier_actions_filer[2].who_filed }
      - "earlier_actions_type3": ${ earlier_actions[2].action_type }
      - "earlier_actions_year_filed3": ${ earlier_actions[2].year_filed }
      - "earlier_RFA_no": ${ not earlier_RFA_yes }
      - "earlier_RFA_yes": ${ earlier_RFA_yes }
      - "earlier_RFA_where_filed1": ${ earlier_RFA[0].where_filed }
      - "earlier_RFA_filer1": ${ earlier_RFA[0].who_filed }
      - "earlier_RFA_actions_type1": ${ earlier_RFA[0].action_type }
      - "earlier_RFA_year_filed1": ${ earlier_RFA[0].year_filed }
      - "earlier_RFA_where_filed2": ${ earlier_RFA[1].where_filed }
      - "earlier_RFA_filer2": ${ earlier_RFA[1].who_filed }
      - "earlier_RFA_actions_type2": ${ earlier_RFA[1].action_type }
      - "earlier_RFA_year_filed2": ${ earlier_RFA[1].year_filed }
      - "earlier_RFA_where_filed3": ${ earlier_RFA[2].where_filed }
      - "earlier_RFA_filer3": ${ earlier_RFA[2].who_filed }
      - "earlier_RFA_actions_type3": ${ earlier_RFA[2].action_type }
      - "earlier_RFA_year_filed3": ${ earlier_RFA[2].year_filed }
      - "defendant_military_service": ${ defendant_military_service }
      - "defendant_no_military_service": ${ defendant_no_military_service }
      - "plaintiff_military_service": ${ plaintiff_military_service }
      - "plaintiff_no_military_service": ${ plaintiff_no_military_service }
      - "divorce_decree": ${ grant_for["divorce"] }
      - "legal_separation_decree": ${ grant_for["legal_separation"] }
      - "dissolution_decree": ${ grant_for["dissolution"] }
      - "property_maintenance": ${ property_maintenance }
      - "spousal_maintenancee": ${ spousal_maintenancee }
      - "court_costs": ${ court_costs }
      - "attorney_fees": ${ attorney_fees }
      - "name_change": ${ name_change }
      - "plaintiff_former_name": ${ plaintiff_former_name }
      - "written_agreement_attached": ${ written_agreement_attached }
      # It's a signature: test which file version this is; leave empty unless it's the final version)
      - "signature_date1": ${ signature_date }
